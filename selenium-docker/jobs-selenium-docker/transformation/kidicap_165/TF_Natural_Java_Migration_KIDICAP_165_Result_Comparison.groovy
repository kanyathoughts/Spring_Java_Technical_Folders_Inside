@Library('TestUtils') _

/**
 * Execute a result comparison of the Java files generated by a nat2java of the KIDICAP project against the expected Java files of a certain maxenso build.
 * 
 * @param mxBuildVersion  The maxenso build to use. This is the test object.
 *        type: Extensible Choice -> File Choice Parameter
 * @param kidicapBuild  The build version of a KIDICAP_nat2java job to fetch the KIDICAP jars from.
 *        type: Extensible Choice -> File Choice Parameter
 * @param transformCopycodes  If copycodes shall be transformed during nat2java or not
 *        type: boolean
 * @param useDifferentTestProjectBranch By default the project is checked out with branch master.
 * 		If useDifferentTestProjectBranch is set to true the branch is overridden by the parameter differentTestProjectBranch.
 * @param differentTestProjectBranch The branch that will be used if useDifferentTestProjectBranch is set.
 */

nodeTF('Docker-host && Region-EU') {

	timestamps {

		def mxVersionUtils = new MxVersionUtils()
		def gitUtils = new GitUtils()
		def miscUtils = new MiscUtils()
		def resultComparisonUtils = new ResultComparisonUtils()
		def dockerUtils = new DockerUtils()
		def spUtils = new SharepointUtils()

		def workDir
		
		def remoteProjectLocation = 'innowake-test-projects/transformation-test-projects/kidicap/kidicap.git'
		def testProjectBranch = mxVersionUtils.getTestProjectBranch(useDifferentTestProjectBranch, differentTestProjectBranch, mxBuildVersion)

		transformCopycodes = Boolean.parseBoolean(transformCopycodes)
		buildName "#${env.BUILD_ID} - ${mxBuildVersion} - transformCopycodes: ${transformCopycodes}"
		buildDescription "kidicapBuild=${kidicapBuild} testProjectBranch=${testProjectBranch}"

		try {
			deleteDir()
			docker.image(dockerUtils.pullJenkinsEnvironmentImage(miscUtils.getDefaultJavaVersion())).inside('-v jenkins-m2-repo:/var/m2_repo:rw') {

				stage('init') {
					workDir = pwd()
					gitUtils.checkoutGitProject(workDir, "${gitUtils.getGitUrlQef()}/${remoteProjectLocation}", testProjectBranch)
					spUtils.downloadJobArtifact('TF_Natural_Java_Migration_KIDICAP_165', kidicapBuild, "kidicap-src_transformCopycodes=${transformCopycodes}.jar", 'KIDICAP_LIBS')
					sh "mv KIDICAP_LIBS/kidicap-src_transformCopycodes=${transformCopycodes}.jar KIDICAP_LIBS/kidicap-src.jar"
					sh "mkdir -p ${workDir}/result-comparison/log"
					sh "mkdir -p ${workDir}/result-comparison/tmp"
				}

				stage('result-comparison') {
					def actualZip = "${workDir}/KIDICAP_LIBS/kidicap-src.jar"
					def actualDir = "${workDir}/java-actual"
					sh "mkdir -p ${actualDir}"
					sh "unzip -q ${actualZip} -d ${actualDir}"

					def wcc = transformCopycodes ? 'withCopycodes' : 'withoutCopycodes'
					def expectedZip = "${workDir}/expected/${wcc}/${wcc}.zip"
					def expectedDir = "${workDir}/java-expected"
					sh "mkdir -p ${expectedDir}"
					sh "unzip -q ${expectedZip} -d ${expectedDir}"
					def compareResult = resultComparisonUtils.resultCompare(actualDir, expectedDir, [], ['META-INF'], "${workDir}/result-comparison/log", "${workDir}/result-comparison/tmp")
					if (compareResult != 0) {
						unstable 'Deviations in file comparison'
					}
				}
			}
		} catch (ex) {
			miscUtils.errorWithStackTrace(ex)
		} finally {
			stage('finalize') {
				archiveArtifacts allowEmptyArchive: true, artifacts: 'java-actual/**/*,java-expected/**/*,result-comparison/**/*'
			}
		}
	}
}
