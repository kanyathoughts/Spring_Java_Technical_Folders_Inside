{
  "id": "test",
  "realm": "test",
  "accessTokenLifespan": 300,
  "accessTokenLifespanForImplicitFlow": 900,
  "ssoSessionIdleTimeout": 1800,
  "ssoSessionMaxLifespan": 36000,
  "offlineSessionIdleTimeout": 2592000,
  "offlineSessionMaxLifespan": 5184000,
  "accessCodeLifespan": 60,
  "accessCodeLifespanUserAction": 300,
  "accessCodeLifespanLogin": 1800,
  "actionTokenGeneratedByAdminLifespan": 43200,
  "actionTokenGeneratedByUserLifespan": 300,
  "enabled": true,
  "sslRequired": "external",
  "loginWithEmailAllowed": true,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "waitIncrementSeconds": 60,
  "quickLoginCheckMilliSeconds": 1000,
  "maxDeltaTimeSeconds": 43200,
  "failureFactor": 30,
  "roles": {
    "realm": [
      {
        "name": "admin",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-natures",
        "composite": true,
        "composites": {
          "realm": [
            "client-1-project-2-discovery",
            "client-1-project-2-mining"
          ]
        },
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-discovery",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-viewer",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-manager",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-discovery",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "uma_authorization",
        "description": "${role_uma_authorization}",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-editor",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-mining",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-editor",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-admin",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "offline_access",
        "description": "${role_offline-access}",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-natures",
        "composite": true,
        "composites": {
          "realm": [
            "client-2-project-3-discovery",
            "client-2-project-3-discovery-light",
            "client-2-project-3-mining"
          ]
        },
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-discovery-light",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-mining",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-editor",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-admin",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-roles",
        "composite": true,
        "composites": {
          "realm": [
            "client-1-project-1-manager",
            "client-1-project-2-manager",
            "client-1-project-1-viewer",
            "client-1-project-2-viewer",
            "client-1-project-2-editor",
            "client-1-project-1-editor"
          ]
        },
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-editor",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-natures",
        "composite": true,
        "composites": {
          "realm": [
            "client-2-project-4-discovery-light",
            "client-2-project-4-mining"
          ]
        },
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-viewer",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-viewer",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-mining",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-manager",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-natures",
        "composite": true,
        "composites": {
          "realm": [
            "client-1-project-1-mining"
          ]
        },
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-roles",
        "composite": true,
        "composites": {
          "realm": [
            "client-2-project-4-viewer",
            "client-2-project-4-editor",
            "client-2-project-3-manager",
            "client-2-project-4-manager",
            "client-2-project-3-viewer",
            "client-2-project-3-editor"
          ]
        },
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-viewer",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-discovery-light",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-1-discovery",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-discovery",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-4-mining",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-manager",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-manager",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-1-project-2-discovery-light",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      },
      {
        "name": "client-2-project-3-discovery-light",
        "composite": false,
        "clientRole": false,
        "containerId": "mining",
        "attributes": {}
      }
    ]
  },
  "groups": [
    {
      "name": "client-1-users",
      "path": "/client-1-users",
      "attributes": {},
      "realmRoles": [],
      "clientRoles": {},
      "subGroups": []
    },
    {
      "name": "client-2-users",
      "path": "/client-2-users",
      "attributes": {},
      "realmRoles": [],
      "clientRoles": {},
      "subGroups": []
    }
  ],
  "defaultRoles": [
    "offline_access",
    "uma_authorization"
  ],
  "requiredCredentials": [
    "password"
  ],
  "webAuthnPolicyRpEntityName": "keycloak",
  "webAuthnPolicySignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
  "webAuthnPolicyPasswordlessSignatureAlgorithms": [
    "ES256"
  ],
  "scopeMappings": [
    {
      "clientScope": "offline_access",
      "roles": [
        "offline_access"
      ]
    }
  ],
  "clientScopeMappings": {
    "account": [
      {
        "client": "account-console",
        "roles": [
          "manage-account"
        ]
      }
    ]
  },
  "clients": [
    {
      "clientId": "account",
      "name": "${client_account}",
      "rootUrl": "${authBaseUrl}",
      "baseUrl": "/realms/mining/account/",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "defaultRoles": [
        "manage-account",
        "view-profile"
      ],
      "redirectUris": [
        "/realms/mining/account/*"
      ],
      "webOrigins": [],
      "standardFlowEnabled": true,
      "protocol": "openid-connect"
    },
    {
      "clientId": "account-console",
      "name": "${client_account-console}",
      "rootUrl": "${authBaseUrl}",
      "baseUrl": "/realms/mining/account/",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "/realms/mining/account/*"
      ],
      "standardFlowEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect",
      "attributes": {
        "pkce.code.challenge.method": "S256"
      },
      "protocolMappers": [
        {
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper"
        }
      ]
    },
    {
      "clientId": "admin-cli",
      "name": "${client_admin-cli}",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "directAccessGrantsEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect"
    },
    {
      "clientId": "backend",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect",
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1
    },
    {
      "clientId": "broker",
      "name": "${client_broker}",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "standardFlowEnabled": true,
      "protocol": "openid-connect"
    },
    {
      "clientId": "eclipse",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect",
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1
    },
    {
      "clientId": "realm-management",
      "name": "${client_realm-management}",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "bearerOnly": true,
      "standardFlowEnabled": true,
      "protocol": "openid-connect"
    },
    {
      "clientId": "security-admin-console",
      "name": "${client_security-admin-console}",
      "rootUrl": "${authAdminUrl}",
      "baseUrl": "/admin/mining/console/",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "/admin/mining/console/*"
      ],
      "webOrigins": [
        "+"
      ],
      "standardFlowEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect",
      "attributes": {
        "pkce.code.challenge.method": "S256"
      },
      "protocolMappers": [
        {
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "locale",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "locale",
            "jsonType.label": "String"
          }
        }
      ]
    }
  ],
  "clientScopes": [
    {
      "name": "offline_access",
      "description": "OpenID Connect built-in scope: offline_access",
      "protocol": "openid-connect",
      "attributes": {
        "consent.screen.text": "${offlineAccessScopeConsentText}",
        "display.on.consent.screen": "true"
      }
    },
    {
      "name": "role_list",
      "description": "SAML role list",
      "protocol": "saml",
      "attributes": {
        "consent.screen.text": "${samlRoleListScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper",
          "consentRequired": false,
          "config": {
            "single": "false",
            "attribute.nameformat": "Basic",
            "attribute.name": "Role"
          }
        }
      ]
    },
    {
      "name": "roles",
      "description": "OpenID Connect scope for add user roles to the access token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "true",
        "consent.screen.text": "${rolesScopeConsentText}"
      },
      "protocolMappers": [
        {
          "name": "realm roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute": "foo",
            "access.token.claim": "true",
            "claim.name": "realm_access.roles",
            "jsonType.label": "String",
            "multivalued": "true"
          }
        }
      ]
    },
    {
      "name": "web-origins",
      "description": "OpenID Connect scope for add allowed web origins to the access token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false",
        "consent.screen.text": ""
      },
      "protocolMappers": [
        {
          "name": "allowed web origins",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-allowed-origins-mapper",
          "consentRequired": false,
          "config": {}
        }
      ]
    }
  ],
  "defaultDefaultClientScopes": [
    "role_list",
    "roles",
    "web-origins"
  ],
  "defaultOptionalClientScopes": [
    "offline_access"
  ],
  "browserSecurityHeaders": {
    "contentSecurityPolicyReportOnly": "",
    "xContentTypeOptions": "nosniff",
    "xRobotsTag": "none",
    "xFrameOptions": "SAMEORIGIN",
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "xXSSProtection": "1; mode=block",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains"
  },
  "eventsListeners": [
    "jboss-logging"
  ],
  "components": {
    "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
      {
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subType": "authenticated",
        "subComponents": {},
        "config": {
          "allowed-protocol-mapper-types": [
            "saml-user-property-mapper",
            "saml-user-attribute-mapper",
            "oidc-address-mapper",
            "oidc-full-name-mapper",
            "oidc-usermodel-attribute-mapper",
            "saml-role-list-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-usermodel-property-mapper"
          ]
        }
      },
      {
        "name": "Max Clients Limit",
        "providerId": "max-clients",
        "subType": "anonymous",
        "config": {
          "max-clients": [
            "200"
          ]
        }
      },
      {
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subType": "anonymous",
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        }
      },
      {
        "name": "Trusted Hosts",
        "providerId": "trusted-hosts",
        "subType": "anonymous",
        "config": {
          "host-sending-registration-request-must-match": [
            "true"
          ],
          "client-uris-must-match": [
            "true"
          ]
        }
      },
      {
        "name": "Full Scope Disabled",
        "providerId": "scope",
        "subType": "anonymous"
      },
      {
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subType": "anonymous",
        "config": {
          "allowed-protocol-mapper-types": [
            "saml-user-attribute-mapper",
            "saml-role-list-mapper",
            "oidc-full-name-mapper",
            "saml-user-property-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-address-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-usermodel-property-mapper"
          ]
        }
      },
      {
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subType": "authenticated",
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        }
      },
      {
        "name": "Consent Required",
        "providerId": "consent-required",
        "subType": "anonymous"
      }
    ],
    "org.keycloak.keys.KeyProvider": [
      {
        "name": "aes-generated",
        "providerId": "aes-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ]
        }
      },
      {
        "name": "hmac-generated",
        "providerId": "hmac-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ],
          "algorithm": [
            "HS256"
          ]
        }
      },
      {
        "name": "rsa-generated",
        "providerId": "rsa-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ]
        }
      }
    ]
  },
  "authenticationFlows": [
    {
      "alias": "Account verification options",
      "description": "Method with which to verity the existing account",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-email-verification",
          "requirement": "ALTERNATIVE",
          "priority": 10
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "Authentication Options",
      "description": "Authentication options.",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "basic-auth",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "basic-auth-otp",
          "requirement": "DISABLED",
          "priority": 20
        },
        {
          "authenticator": "auth-spnego",
          "requirement": "DISABLED",
          "priority": 30
        }
      ]
    },
    {
      "alias": "Browser - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "REQUIRED",
          "priority": 20
        }
      ]
    },
    {
      "alias": "Direct Grant - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "requirement": "REQUIRED",
          "priority": 20
        }
      ]
    },
    {
      "alias": "First broker login - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "REQUIRED",
          "priority": 20
        }
      ]
    },
    {
      "alias": "Handle Existing Account",
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "requirement": "REQUIRED",
          "priority": 20,
          "flowAlias": "Account verification options",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "Reset - Conditional OTP",
      "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "reset-otp",
          "requirement": "REQUIRED",
          "priority": 20
        }
      ]
    },
    {
      "alias": "User creation or linking",
      "description": "Flow for the existing/non-existing user alternatives",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "create unique user config",
          "authenticator": "idp-create-user-if-unique",
          "requirement": "ALTERNATIVE",
          "priority": 10
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "flowAlias": "Handle Existing Account",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "Verify Existing Account by Re-authentication",
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 20,
          "flowAlias": "First broker login - Conditional OTP",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "browser",
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "requirement": "ALTERNATIVE",
          "priority": 10
        },
        {
          "authenticator": "auth-spnego",
          "requirement": "DISABLED",
          "priority": 20
        },
        {
          "authenticator": "identity-provider-redirector",
          "requirement": "ALTERNATIVE",
          "priority": 25
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "flowAlias": "forms",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "clients",
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "client-secret",
          "requirement": "ALTERNATIVE",
          "priority": 10
        },
        {
          "authenticator": "client-jwt",
          "requirement": "ALTERNATIVE",
          "priority": 20
        },
        {
          "authenticator": "client-secret-jwt",
          "requirement": "ALTERNATIVE",
          "priority": 30
        },
        {
          "authenticator": "client-x509",
          "requirement": "ALTERNATIVE",
          "priority": 40
        }
      ]
    },
    {
      "alias": "direct grant",
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-username",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "direct-grant-validate-password",
          "requirement": "REQUIRED",
          "priority": 20
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 30,
          "flowAlias": "Direct Grant - Conditional OTP",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "docker auth",
      "description": "Used by Docker clients to authenticate against the IDP",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "docker-http-basic-authenticator",
          "requirement": "REQUIRED",
          "priority": 10
        }
      ]
    },
    {
      "alias": "first broker login",
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "review profile config",
          "authenticator": "idp-review-profile",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "requirement": "REQUIRED",
          "priority": 20,
          "flowAlias": "User creation or linking",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "forms",
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 20,
          "flowAlias": "Browser - Conditional OTP",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "http challenge",
      "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "no-cookie-redirect",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "requirement": "REQUIRED",
          "priority": 20,
          "flowAlias": "Authentication Options",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "registration",
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "flowAlias": "registration form",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "registration form",
      "description": "registration form",
      "providerId": "form-flow",
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-user-creation",
          "requirement": "REQUIRED",
          "priority": 20
        },
        {
          "authenticator": "registration-profile-action",
          "requirement": "REQUIRED",
          "priority": 40
        },
        {
          "authenticator": "registration-password-action",
          "requirement": "REQUIRED",
          "priority": 50
        },
        {
          "authenticator": "registration-recaptcha-action",
          "requirement": "DISABLED",
          "priority": 60
        }
      ]
    },
    {
      "alias": "reset credentials",
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "reset-credentials-choose-user",
          "requirement": "REQUIRED",
          "priority": 10
        },
        {
          "authenticator": "reset-credential-email",
          "requirement": "REQUIRED",
          "priority": 20
        },
        {
          "authenticator": "reset-password",
          "requirement": "REQUIRED",
          "priority": 30
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 40,
          "flowAlias": "Reset - Conditional OTP",
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "saml ecp",
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "requirement": "REQUIRED",
          "priority": 10
        }
      ]
    }
  ],
  "authenticatorConfig": [
    {
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  "browserFlow": "browser",
  "registrationFlow": "registration",
  "directGrantFlow": "direct grant",
  "resetCredentialsFlow": "reset credentials",
  "clientAuthenticationFlow": "clients",
  "dockerAuthenticationFlow": "docker auth",
  "keycloakVersion": "15.1.1"
}