/**
*  CPGM02 Comments
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef __MVS__
/* MF: this IBM lib is needed */
#include <decimal.h>
/* link to cobol */
#pragma linkage(CBLPGM1, COBOL)
long SQLCODE;

#else  /* #ifdef WIN32 */
/* PC */
#include <sqldef.h>

#endif

#include "MSNGHDR.h"

#include "CHEADER.h"

void dberr();

/* some comments for testing */
void insert(MYDATATYPE* myptr);
void update(MYDATATYPE* myptr);
void select(MYDATATYPE* myptr);

/* more comments */
int getstuff(char* szSicht);
int getfunky(char* szFunktion);

void konvertor(MYDATATYPE* lc);

void konvertorOut(MYDATATYPE* lc);

/* Unsupported SQL */
EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE LADDBA0A;

EXEC SQL
     DECLARE DUMMYSQL CURSOR WITH HOLD FOR
     SELECT DUMMYVAL1,
            DUMMYVAL2,
            DUMMYVAL3,
            DUMMYVAL4,
            SOMETHING,
            OTHERTHING
     FROM DAS_TABLE
     WHERE OTHERTHING = :OTHERTHING
       AND SOMETHING = :SOMETHING
       AND DUMMYVAL4 <= :DUMMYVAL4
       AND DUMMYVAL3 > :DUMMYVAL3
     ORDER BY 1, 2, 3, 4, 5, 6, 7;

EXEC SQL
     DECLARE DUMCURS CURSOR WITH HOLD FOR
     SELECT DUMMYVAL1,
            DUMMYVAL2,
            DUMMYVAL3,
            DUMMYVAL4,
            SOMETHING,
            OTHERTHING
     FROM DER_TABLE
     WHERE ((DUMMYVAL1 = :DUMMYVAL1 AND DUMMYVAL2 <> :DUMMYVAL2) OR
            (DUMMYVAL3 <> :DUMMYVAL3))
       AND SOMETHING <= :SOMETHING
       AND OTHERTHING > :OTHERTHING
     ORDER BY 1, 2, 3, 4, 5, 6, 7;

static void konvertor(MYDATATYPE* myptr)
{
  int i;
  MY_DATA data;

  memcpy(&data, myptr->DATA, sizeof(MY_DATA));
}

static void dberr() {
  char errrgh[1285];
  memset(errrgh, 0, 1285);
  sprintf(errrgh, "CPGM02");
  mahsql(errrgh);
}

static void konvertorOut(MYDATATYPE* mahdata)
{
  int i;
  MY_DATA data;

  /* VAL1 */
  data.L_VAL = DUMMYVAL1;
  data.L_VAL2 = DUMMYVAL2;

  memcpy(mahdata->DATA, &data, sizeof(MY_DATA));
}

/* with your bad self */
static int getfunky(char* funkytown)
{
  int ret;
  char funkytn[9] = "        ";

  memcpy(funkytown, funkytn, 8);
  
  if (!strcmp(funkytn, "INSERT  ")) 
  {
    ret = INSERT;
  } 
  else if (!strcmp(funkytn, "UPDATE  ")) 
  {
    ret = UPDATE;
  } 
  else if (!strcmp(funkytn, "SELECT  ")) 
  {
    ret = SELECT;
  } 
  else 
  {
    ret = UNKNOWN_FUNCTION;
  }
  return ret;
}


static int getstuff(char* stuff)
{
 int ret;
 char stuffc[9] = "        ";

 return ret;
}