<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
	<Appenders>
		<Null name="NullAppender" />
		<Console name="Console" target="SYSTEM_OUT">
			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{traceId},%X{spanId},%X{parentId}] [%t] %-5level %logger{36} - %msg%n" />
		</Console>

		<Routing name="RollingFile">
			<Routes pattern="$${sys:job-api.log.logFolder}">
				<!-- Set this to any appender that should receive logs as long as the logFolder property has not been populated yet.
					 Using NullAppender here on purpose instead of the Console appender. Otherwise logs would be duplicated, since the
					 Console appender is already present in the root logger. -->
				<Route key="$${sys:job-api.log.logFolder}" ref="NullAppender" />
				<Route>
					<RollingFile name="RollingFile-${sys:job-api.cluster.nodeName}" fileName="${sys:job-api.log.logFolder}/mining-api-server.log"
						filePattern="${sys:job-api.log.logFolder}/mining-api-server-%i.log.gz">
						<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{traceId},%X{spanId},%X{parentId}] [%t] %-5level %logger{36} - %msg%n" />
						<Policies>
							<SizeBasedTriggeringPolicy size="250 MB"/>
						</Policies>
					</RollingFile>
				</Route>
			</Routes>
		</Routing>

		<Routing name="job">
			<Routes pattern="$${ctx:job-id}">
				<!-- Log to console when the job-id is not set -->
				<Route key="$${ctx:job-id}" ref="NullAppender" />
				<Route>
					<File name="jobAppender-${ctx:job-id}"
						fileName="${sys:job-api.log.logFolder}/${sys:job-api.log.logFilePrefix}${ctx:job-id}.log">
						<Filters>
							<ThresholdFilter level="trace" onMatch="accept" />
						</Filters>
						<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
					</File>
				</Route>
			</Routes>
		</Routing>

		<Routing name="jobLocks">
			<Routes pattern="$${ctx:job-id}">
				<!-- Log to console when the job-id is not set -->
				<Route key="$${ctx:job-id}" ref="Console" />
				<Route>
					<File name="jobAppender-${ctx:job-id}"
						fileName="${sys:job-api.log.logFolder}/${sys:job-api.log.logFilePrefix}${ctx:job-id}.locks.log">
						<Filters>
							<ThresholdFilter level="trace" onMatch="accept" />
						</Filters>
						<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
					</File>
				</Route>
			</Routes>
		</Routing>

		<Routing name="jobStoreModel">
			<Routes pattern="$${ctx:job-id}">
				<!-- Log to console when the job-id is not set -->
				<Route key="$${ctx:job-id}" ref="Console" />
				<Route>
					<File name="jobAppender-${ctx:job-id}"
						fileName="${sys:job-api.log.logFolder}/${sys:job-api.log.logFilePrefix}${ctx:job-id}-StoreModel.log">
						<Filters>
							<ThresholdFilter level="trace" onMatch="accept" />
						</Filters>
						<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
					</File>
				</Route>
			</Routes>
		</Routing>
	</Appenders>

	<Loggers>
		<Root level="info">
			<AppenderRef ref="Console" />
			<AppenderRef ref="RollingFile" />
			<AppenderRef ref="job" />
		</Root>

		<Logger name="innowake.ndt.cobol.parser.ast.CobolParserAst" level="error"/>

		<Logger name="innowake.ndt.naturalparser" level="off"/>

		<Logger name="innowake.mining.server.graphql.config" level="info"/>
		
		<Logger name="innowake.mining.server.discovery" level="info"/>

		<Logger name="innowake.mining.server.discovery.parser" level="error"/>

		<Logger name="innowake.mining.server.discovery.parser.sql" level="error"/>
		
		<Logger name="innowake.mining.server.discovery.parser.csd" level="off"/>

		<Logger name="innowake.mining.server.discovery.objectResolving" level="error"/>

		<Logger name="innowake.mining.server.config" level="info"/>

		<Logger name="innowake.mining.data" level="error"/>
		
		<Logger name="innowake.mining.data.io" level="info"/>
		
		<Logger name="innowake.mining.data.access" level="error"/>
		
		<Logger name="innowake.mining.data.access.postgres" level="info"/>
		
		<Logger name="innowake.mining.data.core" level="error"/>
		
		<Logger name="innowake.mining.data.datapoints" level="error"/>
		
		<Logger name="innowake.mining.data.discovery" level="info"/>
		
		<Logger name="innowake.mining.data.migration" level="debug"/>
		
		<Logger name="innowake.mining.controlflow" level="trace"/>
		
		<Logger name="org.springframework.web.method" level="info" />

		<!-- set to "debug" to log the application config on server startup for debugging purposes
		     this includes the contents of all configuration properties, environment variables, etc.
		     the output MAY CONTAIN SENSITIVE INFORMATION LIKE PASSWORDS etc., so use with caution -->
		<Logger name="innowake.mining.server.applicationconfig" level="${env:MINING_LOG_APPLICATION_CONFIG:-off}"/>
		
		<!-- uncomment to enable detailed logging of ModuleRepository modifications during Discover Metrics - very verbose! -->
		<!-- <Logger name="innowake.mining.data.discovery.ModuleRepository" level="trace"/> -->

		<!-- uncomment next 2 lines to enable detailed logging of task processing -->
		<!-- <Logger name="innowake.mining.server.discovery.metrics.MetricsCollector" level="trace"/> -->
		<!-- <Logger name="innowake.lib.job.api.task-processor" level="trace"/> -->

		<Logger name="innowake.mining.server.discovery.storeModel" level="debug">
			<AppenderRef ref="jobStoreModel"/>
		</Logger>

		<Logger name="com.zaxxer.hikari.pool" level="off"/>
		
		<!-- <Logger name="innowake.mining.server.discovery.cache.DiscoveryJobCache" level="trace"/> -->
		
		<!-- enables debug of OLogManager for orient-->
		<Logger name="com.orientechnologies" level="off"/>
		<!-- individual orient classes should be added and set to debug for logging -->
		<Logger name="com.orientechnologies.orient.client.remote.OStorageRemote" level="off"/>
		<Logger name="com.orientechnologies.common.concur.resource.OResourcePool" level="off"/>
		<!-- uncomment the next line to enable cache logging -->
		<!-- <Logger name="org.springframework.cache" level="trace"/> -->

<!--		<Logger name="innowake.mining.server.datalineage.query.DataFlowGraphQuery" level="trace"/>-->
<!--		<Logger name="innowake.mining.server.datalineage.fieldtracing.service.FieldTracingModelImportService" level="trace"/>-->
<!--		<Logger name="innowake.mining.server.job.genai.MonitoredTaskManager" level="debug"/>-->

        <!-- logging related to test contexts in spring, especially useful when
             trying to determine how many context objects are cached during test
             execution -->
		<!-- <Logger name="org.springframework.test.context" level="TRACE"/> -->

		<!-- uncomment to enable detailed logging for Orika (Object Mapping) -->
		<!-- <Logger name="ma.glasnost.orika" level="TRACE"/> -->

		<!-- <Logger name="org.testcontainers" level="DEBUG"/> -->
		<!-- <Logger name="com.github.dockerjava" level="DEBUG"/> -->
		<!-- <Logger name="com.github.dockerjava.zerodep" level="WARN"/> -->

		<!-- PROFILING STARTS HERE - to use, uncomment profiling categories below and activate the spring profile "profiling" -->

		<!-- <Logger name="prof.callchain" level="debug"/> -->
		<!-- <Logger name="prof.controller" level="debug"/> -->
		<!-- <Logger name="prof.db" level="debug"/> -->
		<!-- <Logger name="prof.discovery" level="debug"/> -->

		<!-- <Logger name="prof.datalineage" level="debug"/> -->


	</Loggers>

</Configuration>
