/*
 * Copyright (c) 2020 innoWake gmbh Germany. All rights reserved.
 */
package innowake.mining.job.pi;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.springframework.test.context.ActiveProfiles;

import innowake.mining.job.AbstractJobTest;
import innowake.lib.job.api.Result;
import innowake.lib.job.api.management.JobInformation;
import innowake.mining.shared.model.job.JobStatus;

/**
 * Test that calculates pi on a single node.
 */
@ActiveProfiles("local_mode")
public class CalculatePiLocalTest extends AbstractJobTest {
	
	public static final BigDecimal PI = new BigDecimal("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117"
			+ "067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165"
			+ "271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384"
			+ "146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394"
			+ "946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146"
			+ "549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908"
			+ "302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532"
			+ "171226806613001927876611195909216420198934265998598828934394301071066667491877242134425431345953313663887060239776329976126686450266214494446013"
			+ "667008172123239701931750165669391064745347522345777144945791703054779758545304691940939663514130947140675857369526925935429965039584445096993840"
			+ "117562555368299199660960177151353502191171861603693622219927096939378549515169812869909587594741510041774536098388517079049961792555940704223781"
			+ "437730105584783801038467525754868668106569592038928957311739134908530828676788991956835260325103134980657438500388064665171936537492695685819420"
			+ "415123749682899943147084709938970329481626862854179402119204364401349534750725219426418534157214173900227278975453995737535842619474175838615830"
			+ "242283607454052309660247394409258192940808318938116691559051439364664064731922824199575900573833617331630479849930360650357341432428354114528652"
			+ "966137007200029702211876610364768527049650337072530511155785344665084309765116267228484063567922438822334945017426546980890748272834836478329076"
			+ "140071607691125018503438457248086054503232987483768004195356025288511511476259149378505621493076511930764586123867243971595256143039640567574848"
			+ "376928088190362242119232147014939883120404045816907336062386463007934590529720057412697170714522965119338326682536299777803163378707175999045529"
			+ "482338348289108571273308131782060021898841361931542640992558566646766121747035166943613040734555714492136629407981204240323009144329257274450079"
			+ "473233480595736519370545273585290807426516521014696179781821007045353589861998168341635337086087679177952890350782310606540221165925900582876575"
			+ "981662036677263730309719817811350728606823768869822332159377064894565662020584598568206146941843678011143246608000612224285094308805789298901139"
			+ "023518203274882360491779947608674243327573678345135808883040451972193560928563568767664441385401615071935511294539014988608264427910706687683437"
			+ "096145527103055177869826344254340828491601878748964358829393217067519114457435247754035090355861070443487469324761061771382838894797547433090594"
			+ "867676703685293971512481879262004008343776772579064554498265834414446286042644490953318130957756629503324993127739895016982858033012854926757848"
			+ "154361591773563941437564187107257789506062432999719145614131772415992096090413778981300");
	
	@Test
	public void testPiJob() {
		final CalculatePiJob job = new CalculatePiJob(1000);
		startJobWithoutClusterAndAwaitCompletion(job, t -> fail("Job execution failed: " + t.getMessage()), monitor -> {
			JobInformation runningJobInfo = monitor.getJobInformation();
			assertNotNull(runningJobInfo);
			assertEquals(job.getJobId(), runningJobInfo.getJobId());
			assertNull(runningJobInfo.getDuration());
			assertNull(runningJobInfo.getFinishTime());
			assertNotNull(runningJobInfo.getScheduledStartTime());
			assertNotNull(runningJobInfo.getStartTime());
			
			/* Wait until switched into the running state. */
			while (true) {
				runningJobInfo = monitor.getJobInformation();
				assertNotNull(runningJobInfo);
				if (runningJobInfo.getStatus() != JobStatus.SCHEDULED) {
					break;
				}
				try {
					TimeUnit.MILLISECONDS.sleep(500);
				} catch (final InterruptedException e) {
					Thread.currentThread().interrupt();
				}
			}
			
			assertNotNull(runningJobInfo.getEta());
			assertEquals("My PI calculation with 1000 digits", runningJobInfo.getJobDescription());
			assertEquals("myUser", runningJobInfo.getUserName());
			assertTrue(runningJobInfo.getPendingTasks() > 0);
			assertEquals(JobStatus.RUNNING, runningJobInfo.getStatus());
			assertEquals(40, runningJobInfo.getTotalWorkUnits());
			assertNull(runningJobInfo.getResult());
		}, null);
		
		final JobInformation jobInfo = getJobInfo(job.getJobId());
		assertNotNull(jobInfo);
		assertEquals(job.getJobId(), jobInfo.getJobId());
		assertNotNull(jobInfo.getDuration());
		assertNotNull(jobInfo.getFinishTime());
		assertNotNull(jobInfo.getScheduledStartTime());
		assertNotNull(jobInfo.getStartTime());
		assertNull(jobInfo.getEta());
		assertEquals("My PI calculation with 1000 digits", jobInfo.getJobDescription());
		assertEquals("myUser", jobInfo.getUserName());
		assertEquals(0, jobInfo.getPendingTasks());
		assertEquals(JobStatus.SUCCESS, jobInfo.getStatus());
		assertEquals(40, jobInfo.getTotalWorkUnits());
		/* in lib-job INTEGER was used for processedWorkUnits instead of double and the value was 40 */
		assertEquals(39.999999999999325, jobInfo.getProcessedWorkUnits(), 0);
		final Result<Serializable> result = jobInfo.getResult();
		assertNotNull(result);
		final BigDecimal resultValue = (BigDecimal) result.value;
		assertNotNull(resultValue);
		assertEquals(PI, resultValue);
	}
}
