/*
 * Copyright (c) 2020 innoWake gmbh Germany. All rights reserved.
 */
package innowake.mining.shared.extensions;

import java.io.InputStream;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang.StringUtils;

import innowake.mining.shared.access.EntityId;
import innowake.mining.shared.io.ParameterDescription;
import innowake.mining.shared.io.ShowOnExportPage;


/**
 * Interface for Mining extensions that contribute export formats.
 * <p>
 * Such an extension exports mining data into some downloadable format. The interface is generic, in that the extension
 * can define the content-type of the exported data and simply provides an input stream from which the contents can be read.
 * <p>
 * Classes that implement this interface must be put within (or underneath) the package
 * "innowake.mining.extensions". That way they will be picked up by Spring's component scan mechanism
 * and registered automatically.
 */
public interface MiningExportExtension extends AccessRestrictedExtension, ParameterizedExtension, ShowOnExportPageExtension {
	
	/**
	 * A container for the exported value, generated by the extension.
	 */
	public interface ExportValue {
		/**
		 * A file name for that exported value.
		 * <p>
		 * This will be suggested to user agents via the HTTP "Content-Disposition" header.
		 *
		 * @return the file name
		 */
		String getFileName();
		/**
		 * Content-Type of the exported value.
		 * <p>
		 * This will be passed to user agents via the HTTP "Content-Type" header.
		 *
		 * @return the content type
		 */
		String getContentType();
		/**
		 * An input stream from which the exported value can be read.
		 *
		 * @return an input stream
		 */
		InputStream getInputStream();
	}
	/**
	 * Exception thrown from the {@link MiningExportExtension#export(EntityId, Map)} method in case the export fails.
	 */
	public class ExportException extends Exception {

		/**
		 * Constructs a new exception with the specified detail message and
		 * cause.
		 * @param message the detail message
		 * @param cause the cause
		 */
		public ExportException(final String message, final Throwable cause) {
			super(message, cause);
		}

		/**
		 * Constructs a new exception with the specified detail message.
		 * @param message the detail message
		 */
		public ExportException(final String message) {
			super(message);
		}
		
		/**
		 * Constructs a new exception with the specified cause.
		 * @param cause the cause
		 */
		public ExportException(final Throwable cause) {
			super(cause);
		}
		
	}

	/**
	 * An identifier for the export format that this extension contributes.
	 * <p>
	 * This identifier should be unique. If more than one extension contributes a format,
	 * then an extension is chosen at random when the format is requested.
	 *
	 * @return a format identifier
	 */
	String getFormatIdentifier();
	
	/**
	 * Short descriptive text of this export format. This can be displayed on the UI where the user triggers the export.
	 *
	 * @return a short description or name of the export format
	 */
	String getDescription();
	
	/**
	 * Export data from the given project.
	 *
	 * @param projectId the ID of the project from which to export data
	 * @param parameters a map of additional parameters that were passed with the request
	 * @return an {@link ExportValue} containing the exported data
	 * @throws ExportException when export fails for any reason
	 */
	ExportValue export(EntityId projectId, Map<String,List<String>> parameters) throws ExportException;	
	
	@Override
	default List<ParameterDescription> getParameterDescriptions() {
		return Collections.emptyList();
	}
	
	@Override
	default ShowOnExportPage getShowOnExportPage() {
		return new ShowOnExportPage(true, StringUtils.EMPTY, getDescription());
	}
}
