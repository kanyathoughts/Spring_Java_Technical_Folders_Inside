/*
 * Copyright (c) 2023 Deloitte. All rights reserved.
 */
package innowake.mining.server.discovery.externalparsing;

import innowake.lib.core.api.lang.Nullable;

import java.util.Map;

/**
 * Object containing the result of an external parsing request.
 * @param <T> the type of the parse result
 */
public class ExternalParsingResult<T> {

	/**
	 * Status of the external parsing request.
	 */
	public enum Status {
		/**
		 * The request completed successfully. Note that the returned AST may still contain errors generated by the parser.
		 */
		OK,
		/**
		 * The request has failed.
		 */
		ERROR,
		/**
		 * The request could not be handled because no appropriate parsing provider is available.
		 */
		NOT_AVAILABLE
	}

	/**
	 * Error codes for failed requests.
	 */
	public enum ErrorCode {

		/* external-parsing error codes */

		/**
		 * The external parser has encountered an internal error.
		 */
		INTERNAL_ERROR(10000, "Internal Error"),
		/**
		 * Parsing failed due to parse error.
		 */
		PARSE_ERROR(10100, "Parse Error"),
		/**
		 * Parsing failed because the file to parse could not be found.
		 */
		FILE_NOT_FOUND(10200, "File not found"),

		/* standard JSON-RPC error codes */

		/**
		 * Request could not be parsed.
		 */
		RPC_PARSE_ERROR(-32700, "RPC Parse Error"),
		/**
		 * Request was rejected as invalid.
		 */
		RPC_INVALID_REQUEST(-32600, "RPC Invalid Request"),
		/**
		 * Request contained an unknown method name.
		 */
		RPC_METHOD_NOT_FOUND(-32601, "RPC Method not found"),
		/**
		 * Request contained invalid parameters.
		 */
		RPC_INVALID_PARAMS(-32602, "RPC Invalid params"),
		/**
		 * An internal error occurred in the RPC layer.
		 */
		RPC_INTERAL_ERROR(-32603, "RPC Internal error"),
		/**
		 * Enum constant for unknown error codes.
		 */
		UNKNOWN(-1, "Unknown error");

		private final int errorNumber;
		private final String label;

		private ErrorCode(final int errorNumber, final String label) {
			this.errorNumber = errorNumber;
			this.label = label;
		}

		/**
		 * Returns the enum constant matching the given error code.
		 * @param errorCode the numeric error code
		 * @return the enum constant for the error code
		 */
		public static ErrorCode fromErrorCode(final int errorCode) {
			for (final ErrorCode value: values()) {
				if (value.errorNumber == errorCode) {
					return value;
				}
			}
			return UNKNOWN;
		}

		/**
		 * Get the numeric error code.
		 * @return the numeric error code
		 */
		public int getErrorNumber() {
			return errorNumber;
		}

		/**
		 * Get the label (description) of the error code.
		 * @return label of the error code
		 */
		public String getLabel() {
			return label;
		}
	}

	private final Status status;
	@Nullable
	private final T result;
	@Nullable
	private final ErrorCode errorCode;
	@Nullable
	private final String errorMessage;
	@Nullable
	private final Map<String, Object> errorData;

	private ExternalParsingResult(final Status status, @Nullable final T result,
			@Nullable final ErrorCode errorCode, @Nullable final String errorMessage,
			@Nullable final Map<String, Object> errorData) {
		this.status = status;
		this.result = result;
		this.errorCode = errorCode;
		this.errorMessage = errorMessage;
		this.errorData = errorData;
	}

	/**
	 * Creates an {@code ExternalParsingResult} containing a parse result.
	 * @param result the parse result
	 * @return a successful {@code ExternalParsingResult}
	 */
	public static <T> ExternalParsingResult<T> forSuccess(final T result) {
		return new ExternalParsingResult<>(Status.OK, result, null, null, null);
	}

	/**
	 * Creates an {@code ExternalParsingResult} cotntaining an error.
	 *
	 * @param errorCode the error code
	 * @param errorMessage the error message
	 * @return an unsuccessful {@code ExternalParsingResult}
	 */
	public static <T> ExternalParsingResult<T> forError(final ErrorCode errorCode, final String errorMessage) {
		return new ExternalParsingResult<>(Status.ERROR, null, errorCode, errorMessage, null);
	}

	/**
	 * Creates an {@code ExternalParsingResult} containing an error and additional data.
	 *
	 * @param errorCode the error code
	 * @param errorMessage the error message
	 * @param errorData additional data describing the error that occurred
	 * @return an unsuccessful {@code ExternalParsingResult}
	 */
	public static <T> ExternalParsingResult<T> forError(final ErrorCode errorCode, final String errorMessage, final Map<String, Object> errorData) {
		return new ExternalParsingResult<>(Status.ERROR, null, errorCode, errorMessage, errorData);
	}

	/**
	 * Creates an {@code ExternalParsingResult} indicating that no provider for the request was available.
	 * @return a {@code ExternalParsingResult} indicating that no provider is available
	 */
	public static <T> ExternalParsingResult<T> forNotAvailable() {
		return new ExternalParsingResult<>(Status.NOT_AVAILABLE, null, null, null, null);
	}

	/**
	 * Returns the status of the parse result.
	 * @return the status of the parse result
	 */
	public Status getStatus() {
		return status;
	}

	/**
	 * Returns the parse result or {@code null} if parsing was unsuccessful.
	 * @return the parse result or {@code null}
	 */
	@Nullable
	public T getResult() {
		return result;
	}

	/**
	 * Returns the error code or {@code null} if the request was successful.
	 * @return the error code or {@code null}
	 */
	@Nullable
	public ErrorCode getErrorCode() {
		return errorCode;
	}

	/**
	 * Returns the error message or {@code null} if the request was successful.
	 * @return the error message or {@code null}
	 */
	@Nullable
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * Returns additional error data if provided. Returns {@code null} if no additional data is available.
	 * @return map of additional error data or {@code null}
	 */
	@Nullable
	public Map<String, Object> getErrorData() {
		return errorData;
	}
}
