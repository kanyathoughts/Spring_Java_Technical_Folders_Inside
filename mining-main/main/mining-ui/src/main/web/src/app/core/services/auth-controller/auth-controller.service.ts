/* tslint:disable */
/**
 * mining server REST API
 * This is the description of the mining server REST API endpoints.
 *
 * OpenAPI spec version: 99.9.99-TRUNK-MINING-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * The class has been edited manually because Swagger couldn't handle types correctly.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpUrlEncodingCodec }                           from '@angular/common/http';
import { Observable }                                        from 'rxjs';
import { BASE_PATH, Configuration } from '@innowake/mining-api-angular-client';
import { TokenInfo } from './tokenInfo';


@Injectable()
export class AuthControllerService {

  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  protected basePath = 'https://localhost:8080/';

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Delete a certain stored token of the current user by its ID
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteToken(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteToken(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteToken(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteToken(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteToken.');
        }

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/auth/token/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a certain stored token by its ID
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getToken(id: string, observe?: 'body', reportProgress?: boolean): Observable<TokenInfo>;
    public getToken(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TokenInfo>>;
    public getToken(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TokenInfo>>;
    public getToken(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getToken.');
        }

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TokenInfo>('get',`${this.basePath}/api/v1/auth/token/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve all tokens stored for the current user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTokens(observe?: 'body', reportProgress?: boolean): Observable<Array<TokenInfo>>;
    public getTokens(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TokenInfo>>>;
    public getTokens(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TokenInfo>>>;
    public getTokens(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TokenInfo>>('get',`${this.basePath}/api/v1/auth/token`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Initiate a new OAuth offline token request
     * 
     * @param body attr
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initOffline(body: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public initOffline(body: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public initOffline(body: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public initOffline(body: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling initOffline.');
        }

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/api/v1/auth/offline`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                responseType: 'text' as 'json',
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get information about the current session, start a new one if not authenticated
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public login(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public login(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public login(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public login(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: string; }>('get',`${this.basePath}/api/v1/auth/login`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invalidate the current session
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logout(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public logout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public logout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public logout(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/auth/logout`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Test if an access token can be obtained using a stored refresh token
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public probeToken(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public probeToken(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public probeToken(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public probeToken(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (id === null || id === undefined) {
             throw new Error('Required parameter id was null or undefined when calling probeToken.');
         }
 
         let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});
 
         let headers = this.defaultHeaders;
 
         // authentication (access_token) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
             queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<any>('get',`${this.basePath}/api/v1/auth/token/${encodeURIComponent(String(id))}/probe`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
     * Update a certain stored token of the current user
     * 
     * @param body tokenInfo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateToken(body: TokenInfo, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateToken(body: TokenInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateToken(body: TokenInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateToken(body: TokenInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateToken.');
        }

        let queryParameters = new HttpParams({encoder: new HttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (access_token) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["access_token"]) {
            queryParameters = queryParameters.set('access_token', this.configuration.apiKeys["access_token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/auth/token`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
