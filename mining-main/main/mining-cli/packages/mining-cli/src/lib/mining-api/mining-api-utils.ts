import { AxiosRequestConfig } from 'axios';
import FormData from 'form-data';
import { createReadStream } from 'fs-extra';
import { Component, Inject } from 'iw-ioc';
import { RequestArgs } from 'mining-api-client/dist/base';
import { MiningApiConfig, MINING_API_CONFIG } from './mining-api-config';

@Component()
export class MiningApiUtils {
    constructor (@Inject(MINING_API_CONFIG) private readonly apiConfig: MiningApiConfig) {}

    /**
     * This method must be used because the controller methods generated by
     * swagger-codegen do not perform the multipart form upload correctly.
     *
     * @param requestArgs arguments that are to be used for the upload request
     * @param filePath the path to the file that shall be uploaded
     */
    async uploadFile(requestArgs: RequestArgs, filePath: string) {
        const stream = createReadStream(filePath);

        /* we need take a detour here and construct the request config half-manually,
            * because the auto-generated swagger client fails to set the multipart request headers correctly "-.- */

        const formData = new FormData();
        formData.append('file', stream);

        const requestConfig: AxiosRequestConfig = {
            ...requestArgs.options,
            url: this.apiConfig.basePath + requestArgs.url,
            /* manually set correct headers here */
            headers: {
                ...requestArgs.options.headers,
                ...formData.getHeaders()
            },
            data: formData,
            maxBodyLength: Infinity /* this is required, lol */
        };

        return await this.apiConfig.axios.request(requestConfig);
    }
}